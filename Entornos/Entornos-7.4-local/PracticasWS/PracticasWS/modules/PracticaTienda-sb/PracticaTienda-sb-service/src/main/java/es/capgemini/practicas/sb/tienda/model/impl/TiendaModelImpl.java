/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.capgemini.practicas.sb.tienda.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import es.capgemini.practicas.sb.tienda.model.Tienda;
import es.capgemini.practicas.sb.tienda.model.TiendaModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Tienda service. Represents a row in the &quot;PRACTICA_Tienda&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TiendaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TiendaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TiendaImpl
 * @generated
 */
public class TiendaModelImpl
	extends BaseModelImpl<Tienda> implements TiendaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tienda model instance should use the <code>Tienda</code> interface instead.
	 */
	public static final String TABLE_NAME = "PRACTICA_Tienda";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"nombre", Types.VARCHAR}, {"direccion", Types.VARCHAR},
		{"pais", Types.VARCHAR}, {"provincia", Types.VARCHAR},
		{"ciudad", Types.VARCHAR}, {"codipoPostal", Types.VARCHAR},
		{"gerente", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nombre", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("direccion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pais", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("provincia", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ciudad", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codipoPostal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gerente", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PRACTICA_Tienda (uuid_ VARCHAR(75) null,id_ LONG not null primary key,nombre VARCHAR(75) null,direccion VARCHAR(75) null,pais VARCHAR(75) null,provincia VARCHAR(75) null,ciudad VARCHAR(75) null,codipoPostal VARCHAR(75) null,gerente VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table PRACTICA_Tienda";

	public static final String ORDER_BY_JPQL = " ORDER BY tienda.nombre ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PRACTICA_Tienda.nombre ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NOMBRE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PAIS_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROVINCIA_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TiendaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Tienda.class;
	}

	@Override
	public String getModelClassName() {
		return Tienda.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Tienda, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Tienda, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Tienda, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Tienda)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Tienda, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Tienda, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Tienda)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Tienda, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Tienda, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Tienda, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Tienda, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Tienda, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Tienda, Object>>();
		Map<String, BiConsumer<Tienda, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Tienda, ?>>();

		attributeGetterFunctions.put("uuid", Tienda::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Tienda, String>)Tienda::setUuid);
		attributeGetterFunctions.put("id", Tienda::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<Tienda, Long>)Tienda::setId);
		attributeGetterFunctions.put("nombre", Tienda::getNombre);
		attributeSetterBiConsumers.put(
			"nombre", (BiConsumer<Tienda, String>)Tienda::setNombre);
		attributeGetterFunctions.put("direccion", Tienda::getDireccion);
		attributeSetterBiConsumers.put(
			"direccion", (BiConsumer<Tienda, String>)Tienda::setDireccion);
		attributeGetterFunctions.put("pais", Tienda::getPais);
		attributeSetterBiConsumers.put(
			"pais", (BiConsumer<Tienda, String>)Tienda::setPais);
		attributeGetterFunctions.put("provincia", Tienda::getProvincia);
		attributeSetterBiConsumers.put(
			"provincia", (BiConsumer<Tienda, String>)Tienda::setProvincia);
		attributeGetterFunctions.put("ciudad", Tienda::getCiudad);
		attributeSetterBiConsumers.put(
			"ciudad", (BiConsumer<Tienda, String>)Tienda::setCiudad);
		attributeGetterFunctions.put("codipoPostal", Tienda::getCodipoPostal);
		attributeSetterBiConsumers.put(
			"codipoPostal",
			(BiConsumer<Tienda, String>)Tienda::setCodipoPostal);
		attributeGetterFunctions.put("gerente", Tienda::getGerente);
		attributeSetterBiConsumers.put(
			"gerente", (BiConsumer<Tienda, String>)Tienda::setGerente);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public String getNombre() {
		if (_nombre == null) {
			return "";
		}
		else {
			return _nombre;
		}
	}

	@Override
	public void setNombre(String nombre) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nombre = nombre;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNombre() {
		return getColumnOriginalValue("nombre");
	}

	@Override
	public String getDireccion() {
		if (_direccion == null) {
			return "";
		}
		else {
			return _direccion;
		}
	}

	@Override
	public void setDireccion(String direccion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_direccion = direccion;
	}

	@Override
	public String getPais() {
		if (_pais == null) {
			return "";
		}
		else {
			return _pais;
		}
	}

	@Override
	public void setPais(String pais) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pais = pais;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPais() {
		return getColumnOriginalValue("pais");
	}

	@Override
	public String getProvincia() {
		if (_provincia == null) {
			return "";
		}
		else {
			return _provincia;
		}
	}

	@Override
	public void setProvincia(String provincia) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_provincia = provincia;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalProvincia() {
		return getColumnOriginalValue("provincia");
	}

	@Override
	public String getCiudad() {
		if (_ciudad == null) {
			return "";
		}
		else {
			return _ciudad;
		}
	}

	@Override
	public void setCiudad(String ciudad) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ciudad = ciudad;
	}

	@Override
	public String getCodipoPostal() {
		if (_codipoPostal == null) {
			return "";
		}
		else {
			return _codipoPostal;
		}
	}

	@Override
	public void setCodipoPostal(String codipoPostal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codipoPostal = codipoPostal;
	}

	@Override
	public String getGerente() {
		if (_gerente == null) {
			return "";
		}
		else {
			return _gerente;
		}
	}

	@Override
	public void setGerente(String gerente) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gerente = gerente;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Tienda.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Tienda toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Tienda>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TiendaImpl tiendaImpl = new TiendaImpl();

		tiendaImpl.setUuid(getUuid());
		tiendaImpl.setId(getId());
		tiendaImpl.setNombre(getNombre());
		tiendaImpl.setDireccion(getDireccion());
		tiendaImpl.setPais(getPais());
		tiendaImpl.setProvincia(getProvincia());
		tiendaImpl.setCiudad(getCiudad());
		tiendaImpl.setCodipoPostal(getCodipoPostal());
		tiendaImpl.setGerente(getGerente());

		tiendaImpl.resetOriginalValues();

		return tiendaImpl;
	}

	@Override
	public Tienda cloneWithOriginalValues() {
		TiendaImpl tiendaImpl = new TiendaImpl();

		tiendaImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		tiendaImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		tiendaImpl.setNombre(this.<String>getColumnOriginalValue("nombre"));
		tiendaImpl.setDireccion(
			this.<String>getColumnOriginalValue("direccion"));
		tiendaImpl.setPais(this.<String>getColumnOriginalValue("pais"));
		tiendaImpl.setProvincia(
			this.<String>getColumnOriginalValue("provincia"));
		tiendaImpl.setCiudad(this.<String>getColumnOriginalValue("ciudad"));
		tiendaImpl.setCodipoPostal(
			this.<String>getColumnOriginalValue("codipoPostal"));
		tiendaImpl.setGerente(this.<String>getColumnOriginalValue("gerente"));

		return tiendaImpl;
	}

	@Override
	public int compareTo(Tienda tienda) {
		int value = 0;

		value = getNombre().compareTo(tienda.getNombre());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Tienda)) {
			return false;
		}

		Tienda tienda = (Tienda)object;

		long primaryKey = tienda.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Tienda> toCacheModel() {
		TiendaCacheModel tiendaCacheModel = new TiendaCacheModel();

		tiendaCacheModel.uuid = getUuid();

		String uuid = tiendaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			tiendaCacheModel.uuid = null;
		}

		tiendaCacheModel.id = getId();

		tiendaCacheModel.nombre = getNombre();

		String nombre = tiendaCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			tiendaCacheModel.nombre = null;
		}

		tiendaCacheModel.direccion = getDireccion();

		String direccion = tiendaCacheModel.direccion;

		if ((direccion != null) && (direccion.length() == 0)) {
			tiendaCacheModel.direccion = null;
		}

		tiendaCacheModel.pais = getPais();

		String pais = tiendaCacheModel.pais;

		if ((pais != null) && (pais.length() == 0)) {
			tiendaCacheModel.pais = null;
		}

		tiendaCacheModel.provincia = getProvincia();

		String provincia = tiendaCacheModel.provincia;

		if ((provincia != null) && (provincia.length() == 0)) {
			tiendaCacheModel.provincia = null;
		}

		tiendaCacheModel.ciudad = getCiudad();

		String ciudad = tiendaCacheModel.ciudad;

		if ((ciudad != null) && (ciudad.length() == 0)) {
			tiendaCacheModel.ciudad = null;
		}

		tiendaCacheModel.codipoPostal = getCodipoPostal();

		String codipoPostal = tiendaCacheModel.codipoPostal;

		if ((codipoPostal != null) && (codipoPostal.length() == 0)) {
			tiendaCacheModel.codipoPostal = null;
		}

		tiendaCacheModel.gerente = getGerente();

		String gerente = tiendaCacheModel.gerente;

		if ((gerente != null) && (gerente.length() == 0)) {
			tiendaCacheModel.gerente = null;
		}

		return tiendaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Tienda, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Tienda, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Tienda, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Tienda)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Tienda, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Tienda, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Tienda, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Tienda)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Tienda>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Tienda.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _id;
	private String _nombre;
	private String _direccion;
	private String _pais;
	private String _provincia;
	private String _ciudad;
	private String _codipoPostal;
	private String _gerente;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Tienda, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Tienda)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("nombre", _nombre);
		_columnOriginalValues.put("direccion", _direccion);
		_columnOriginalValues.put("pais", _pais);
		_columnOriginalValues.put("provincia", _provincia);
		_columnOriginalValues.put("ciudad", _ciudad);
		_columnOriginalValues.put("codipoPostal", _codipoPostal);
		_columnOriginalValues.put("gerente", _gerente);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("id_", 2L);

		columnBitmasks.put("nombre", 4L);

		columnBitmasks.put("direccion", 8L);

		columnBitmasks.put("pais", 16L);

		columnBitmasks.put("provincia", 32L);

		columnBitmasks.put("ciudad", 64L);

		columnBitmasks.put("codipoPostal", 128L);

		columnBitmasks.put("gerente", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Tienda _escapedModel;

}